{
	"name": "df_orders_raw_to_cleansed",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_raw_customers",
						"type": "DatasetReference"
					},
					"name": "CustomersFromRawDataSet"
				},
				{
					"dataset": {
						"referenceName": "ds_raw_order_items",
						"type": "DatasetReference"
					},
					"name": "OrderItemsFromRawToCleansed",
					"description": "OrderItems From Raw To Cleansed"
				},
				{
					"dataset": {
						"referenceName": "ds_raw_stores",
						"type": "DatasetReference"
					},
					"name": "StoresFromRaw"
				},
				{
					"dataset": {
						"referenceName": "ds_raw_products",
						"type": "DatasetReference"
					},
					"name": "ProductsFromRaw"
				},
				{
					"dataset": {
						"referenceName": "ds_raw_orders",
						"type": "DatasetReference"
					},
					"name": "OrdersFromRaw"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_cleansed_customers",
						"type": "DatasetReference"
					},
					"name": "CustomersSink"
				},
				{
					"dataset": {
						"referenceName": "ds_cleansed_order_items",
						"type": "DatasetReference"
					},
					"name": "OrderItemsSink"
				},
				{
					"dataset": {
						"referenceName": "ds_cleansed_stores",
						"type": "DatasetReference"
					},
					"name": "StoresSink"
				},
				{
					"dataset": {
						"referenceName": "ds_cleansed_products",
						"type": "DatasetReference"
					},
					"name": "ProductsSink"
				},
				{
					"dataset": {
						"referenceName": "ds_cleansed_orders",
						"type": "DatasetReference"
					},
					"name": "OrdersSink"
				}
			],
			"transformations": [
				{
					"name": "CustomerColumnToInteger"
				},
				{
					"name": "InsertTimestampColumn",
					"description": "Insert Timestamp Column on to Customers"
				},
				{
					"name": "RemoveLineItemColumn",
					"description": "ns 'ORDER_ID, LINE_ITEM_ID, PRODUCT_ID, UNIT_PRICE, QUANTITY'"
				},
				{
					"name": "CastColumns"
				},
				{
					"name": "AddUpdatedTimestampField"
				},
				{
					"name": "RemoveColumns"
				},
				{
					"name": "CastColumnsStoreId"
				},
				{
					"name": "InsertUpdatedTimestampColumn"
				},
				{
					"name": "CastColumnsForProducts"
				},
				{
					"name": "InsertUpdatedColumnCurrentTimestamp"
				},
				{
					"name": "InsertTwoColumns"
				},
				{
					"name": "CastOrdersColumns"
				},
				{
					"name": "RemoveColumnsFromOrders"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CUSTOMER_ID as short,",
				"          EMAIL_ADDRESS as string,",
				"          FULL_NAME as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> CustomersFromRawDataSet",
				"source(output(",
				"          ORDER_ID as short,",
				"          LINE_ITEM_ID as short,",
				"          PRODUCT_ID as short,",
				"          UNIT_PRICE as double,",
				"          QUANTITY as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> OrderItemsFromRawToCleansed",
				"source(output(",
				"          LATITUDE as double,",
				"          LONGITUDE as double,",
				"          STORE_ID as short,",
				"          STORE_NAME as string,",
				"          WEB_ADDRESS as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> StoresFromRaw",
				"source(output(",
				"          PRODUCT_ID as short,",
				"          PRODUCT_NAME as string,",
				"          UNIT_PRICE as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> ProductsFromRaw",
				"source(output(",
				"          ORDER_ID as string,",
				"          ORDER_DATETIME as string,",
				"          CUSTOMER_ID as string,",
				"          ORDER_STATUS as string,",
				"          STORE_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> OrdersFromRaw",
				"CustomersFromRawDataSet cast(output(",
				"          CUSTOMER_ID as integer,",
				"          EMAIL_ADDRESS as string,",
				"          FULL_NAME as string",
				"     ),",
				"     errors: true) ~> CustomerColumnToInteger",
				"CustomerColumnToInteger derive(UPDATED_TIMESTAMP = currentUTC('dd-MMM-yy')) ~> InsertTimestampColumn",
				"OrderItemsFromRawToCleansed select(mapColumn(",
				"          ORDER_ID,",
				"          PRODUCT_ID,",
				"          UNIT_PRICE,",
				"          QUANTITY",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveLineItemColumn",
				"RemoveLineItemColumn cast(output(",
				"          ORDER_ID as integer,",
				"          PRODUCT_ID as integer,",
				"          UNIT_PRICE as double,",
				"          QUANTITY as integer",
				"     ),",
				"     errors: true) ~> CastColumns",
				"CastColumns derive(UPDATED_TIMESTAMP = currentUTC('dd-MMM-yy')) ~> AddUpdatedTimestampField",
				"StoresFromRaw select(mapColumn(",
				"          STORE_ID,",
				"          STORE_NAME,",
				"          LATITUDE,",
				"          LONGITUDE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveColumns",
				"RemoveColumns cast(output(",
				"          STORE_ID as integer,",
				"          STORE_NAME as string,",
				"          LATITUDE as double,",
				"          LONGITUDE as double",
				"     ),",
				"     errors: true) ~> CastColumnsStoreId",
				"CastColumnsStoreId derive(UPDATED_TIMESTAMP = currentUTC('dd-MMM-yy')) ~> InsertUpdatedTimestampColumn",
				"ProductsFromRaw cast(output(",
				"          PRODUCT_ID as integer,",
				"          PRODUCT_NAME as string,",
				"          UNIT_PRICE as double",
				"     ),",
				"     errors: true) ~> CastColumnsForProducts",
				"CastColumnsForProducts derive(UPDATED_TIMESTAMP = currentUTC('dd-MMM-yy')) ~> InsertUpdatedColumnCurrentTimestamp",
				"OrdersFromRaw derive(ORDER_DATE = toDate(ORDER_DATETIME,'dd-MMM-yy'),",
				"          UPDATED_TIMESTAMP = currentUTC('dd-MMM-yy')) ~> InsertTwoColumns",
				"InsertTwoColumns cast(output(",
				"          ORDER_ID as integer,",
				"          CUSTOMER_ID as integer,",
				"          ORDER_STATUS as string,",
				"          STORE_ID as integer,",
				"          ORDER_DATE as date,",
				"          UPDATED_TIMESTAMP as timestamp",
				"     ),",
				"     errors: true) ~> CastOrdersColumns",
				"CastOrdersColumns select(mapColumn(",
				"          ORDER_ID,",
				"          ORDER_DATE,",
				"          CUSTOMER_ID,",
				"          ORDER_STATUS,",
				"          STORE_ID,",
				"          UPDATED_TIMESTAMP",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveColumnsFromOrders",
				"InsertTimestampColumn sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> CustomersSink",
				"AddUpdatedTimestampField sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> OrderItemsSink",
				"InsertUpdatedTimestampColumn sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> StoresSink",
				"InsertUpdatedColumnCurrentTimestamp sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> ProductsSink",
				"RemoveColumnsFromOrders sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> OrdersSink"
			]
		}
	}
}